
require('colors');
var fs = require('fs');
var AdmZip = require('adm-zip');

var _ = require('underscore');
_.str = require('underscore.string');
_.mixin(_.str.exports());


var get = require('../lib/get');
var url = require('../lib/url');
var upload = require('../lib/upload');
var finish = require('../lib/finish');

module.exports = function(cwd, args, callback) {
    if (typeof callback !== 'function') callback = function () {};

    var cmd = args['_'][0];
    if (!cmd) {
        cmd = 'get';
    }

    var ipaPath = args['ipa'] ? args['ipa'] : args['i'];
    if(ipaPath) {
        ipaPath = loadIpaPath(ipaPath);
    }


    var appId = args['appid'] ? args['appid'] : args['a'];
    if (!appId) {
        console.log('Need \'--appId=?\' !'.red);
        return;
    }

    var doneBlock = function(code, string) {
        string = string ? string : '';

        if (code == 0) {
            console.log('\nfir done!'.green);
        } else {
            console.log('Error code: ' + code, 'message: ' + string);
        }

    }

    switch (cmd) {
        case 'get':
            get(appId, doneBlock);
            break;
        case 'url':
            url(appId, doneBlock);
            break;
        case 'upload':
        case 'up':
            upload(appId, ipaPath, doneBlock);
            break;
        case 'finish':
            finish(appId, doneBlock);
            break;
        default :
            console.log('Unknow cmd.');
            break;
    }

//    console.log(cmd.red, args, (appId+'').yellow, (ipaPath+'').green);
}


function loadIpaPath(path) {
    path = path.length > 0 ? path : './';
    var stats = fs.lstatSync(path);
    if (stats.isFile()) {
        return path;
    }
    if (stats.isDirectory()) {
        var files = fs.readdirSync(path);
        for(var i in files) {
            if (_(files[i]).endsWith('.ipa')) {
                return path + '/' + files[i];
            }
        }
    }

    console.log('Can\'t find ipa file in '.yellow + path.bold);
    return null;
}